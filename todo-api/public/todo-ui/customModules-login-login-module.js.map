{"version":3,"sources":["./src/app/customModules/login/login-routing.module.ts","./src/app/customModules/login/login.component.ts","./src/app/customModules/login/login.component.html","./src/app/customModules/login/services/auth.service.ts","./src/app/customModules/login/login.module.ts"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAuD;AACJ;;;AAEnD,MAAM,MAAM,GAAW,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,+DAAc,EAAE,CAAC,CAAC;AAM1D,MAAM,kBAAkB;;iGAAlB,kBAAkB;8JAAlB,kBAAkB,kBAHpB,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAC9B,4DAAY;mIAEX,kBAAkB,uFAFnB,4DAAY;;;;;;;;;;;;;ACPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;;;;;;;;ICkBpD,0EAAuC;IACrC,qEAAI;IAAA,sFAA2B;IAAA,4DAAK;IACpC,6EAA6C;IAAvB,2TAAsB;IAC1C,wEACF;IAAA,4DAAS;IACX,4DAAM;;;IAkBF,0EAQC;IACC,iGACF;IAAA,4DAAM;;;IAWN,0EAQC;IACC,sJAEF;IAAA,4DAAM;;;;IAjDV,2EAKC;IADC,yTAAyB;IAEzB,0EAAkB;IAChB,4EACG;IAAA,wEAAa;IAAA,4DACf;IACD,uEAME;IACF,mHAUM;IACR,4DAAM;IACN,0EAAkB;IAChB,4EAA8C;IAAA,mEAAQ;IAAA,4DAAQ;IAC9D,uEAME;IACF,qHAWM;IACR,4DAAM;IACN,2EAA8D;IAC5D,8EAGC;IACC,mEACF;IAAA,4DAAS;IACX,4DAAM;IACR,4DAAO;;;IAxDL,uFAAuB;IAelB,0DAKvB;IALuB,8LAKvB;IAgBuB,0DAKvB;IALuB,yMAKvB;;AD3DO,MAAM,cAAc;IAKzB,YACU,EAAe,EACf,WAAwB,EACxB,MAAc;QAFd,OAAE,GAAF,EAAE,CAAa;QACf,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QALjB,SAAI,GAAY,KAAK,CAAC;IAM1B,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC7B,KAAK,EAAE;gBACL,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;oBACnB,yDAAU,CAAC,OAAO,CAChB,yJAAyJ,CAC1J;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,EAAE;gBACF;oBACE,yDAAU,CAAC,QAAQ;iBAIpB;aACF;SACF,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YAC1B,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS,CACtD,CAAC,GAAQ,EAAE,EAAE;gBACX,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;gBACnC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;gBAC7C,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;gBAChD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACtC,CAAC,EACD,CAAC,GAAQ,EAAE,EAAE;gBACX,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;YACzC,CAAC,CACF,CAAC;SACH;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;SAC/C;IACH,CAAC;;4EAvDU,cAAc;8FAAd,cAAc;QCV3B,6EAA2B;QACvB,yEAEC;QACC,yEAAkB;QAChB,yEAAuB;QACrB,yEAAiB;QACf,yEAAmB;QACjB,oEAIE;QACJ,4DAAM;QACN,yEAAmB;QACjB,yEAAoC;QAClC,yEAAyC;QACvC,sEAAI;QAAA,8EAAkB;QAAA,4DAAK;QAC7B,4DAAM;QACN,4GAKM;QACN,gHA2DO;QACT,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;QAxE+B,2DAAU;QAAV,0EAAU;QAOlC,0DAAW;QAAX,2EAAW;;;;;;;;;;;;;;;;;;;;ACpBvB,MAAM,WAAW;IACtB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,OAAO,CAAC,OAAY;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;;sEALU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;;;;;;;;;;;;;ACHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAEa;AACT;AACe;;AAY3D,MAAM,WAAW;;0FAAX,WAAW;gJAAX,WAAW,kBAPb;YACP,4DAAY;YACZ,kEAAmB;YACnB,0DAAW;YACX,wEAAkB;SACnB;mIAEU,WAAW,mBARP,+DAAc,aAE3B,4DAAY;QACZ,kEAAmB;QACnB,0DAAW;QACX,wEAAkB","file":"customModules-login-login-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{ path: '', component: LoginComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  public loginForm!: FormGroup;\n  public done: boolean = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.initLoginForm();\n  }\n\n  initLoginForm() {\n    this.loginForm = this.fb.group({\n      email: [\n        '',\n        [\n          Validators.required,\n          Validators.pattern(\n            /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          ),\n        ],\n      ],\n      password: [\n        '',\n        [\n          Validators.required,\n          // Validators.pattern(\n          //   /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+,.\\\\\\/;':\"-]).{8,}$/\n          // ),\n        ],\n      ],\n    });\n  }\n\n  submitForm() {\n    if (!!this.loginForm.valid) {\n      console.log('login form values', this.loginForm.value);\n      this.authService.doLogin(this.loginForm.value).subscribe(\n        (res: any) => {\n          console.log('login success!', res);\n          localStorage.setItem('ACT', res.accessToken);\n          localStorage.setItem('ACT_R', res.refreshToken);\n          this.router.navigate(['/resource']);\n        },\n        (err: any) => {\n          console.log('Error while login!', err);\n        }\n      );\n    } else {\n      console.error('Error login form is invalid!');\n    }\n  }\n}\n","<section class=\"container\">\n    <div\n      class=\"w-100 login-page d-flex justify-content-center align-items-center\"\n    >\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <img\n                src=\"https://images.unsplash.com/photo-1604222025102-6cc630d7f109?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\"\n                class=\"rounded mx-auto d-block w-100\"\n                alt=\"laptop with coffee\"\n              />\n            </div>\n            <div class=\"col-6\">\n              <div class=\"container py-5 mx-auto\">\n                <div class=\"card-title text-center py-3\">\n                  <h4>Login to continue!</h4>\n                </div>\n                <div class=\"text-success\" *ngIf=\"done\">\n                  <h2>Successfully submitted form</h2>\n                  <button type=\"button\" (click)=\"done = !done\">\n                    Login Again\n                  </button>\n                </div>\n                <form\n                  *ngIf=\"!done\"\n                  novalidate\n                  [formGroup]=\"loginForm\"\n                  (ngSubmit)=\"submitForm()\"\n                >\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\" for=\"emailInput\"\n                      >Email address</label\n                    >\n                    <input\n                      type=\"email\"\n                      class=\"form-control\"\n                      id=\"emailInput\"\n                      placeholder=\"name@example.com\"\n                      formControlName=\"email\"\n                    />\n                    <div\n                      *ngIf=\"\n                        loginForm.controls.email.errors &&\n                        (loginForm.controls.email.dirty ||\n                          loginForm.controls.email.touched)\n                      \"\n                      id=\"emailHelp\"\n                      class=\"form-text tex-danger\"\n                    >\n                      Email is required ex.name@domain.com\n                    </div>\n                  </div>\n                  <div class=\"mb-3\">\n                    <label class=\"form-label\" for=\"passwordInput\">Password</label>\n                    <input\n                      type=\"password\"\n                      class=\"form-control\"\n                      id=\"passwordInput\"\n                      placeholder=\"Password\"\n                      formControlName=\"password\"\n                    />\n                    <div\n                      *ngIf=\"\n                        !!loginForm.controls.password.errors &&\n                        (loginForm.controls.password.dirty ||\n                          loginForm.controls.password.touched)\n                      \"\n                      id=\"passwordHelp\"\n                      class=\"form-text tex-danger\"\n                    >\n                      Invalid Password : 1 Alphanumber 1Capital 1 small 1 number\n                      1special char wit min length 8\n                    </div>\n                  </div>\n                  <div class=\"d-flex justify-content-center align-items-center\">\n                    <button\n                      type=\"submit\"\n                      class=\"btn btn-block btn-outline-primary login-btn\"\n                    >\n                      Login\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n  \n  \n  <!-- table -->\n  \n  ","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private http: HttpClient) {}\n\n  doLogin(payload: any) {\n    return this.http.post('http://localhost:8080/api/login', payload);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    LoginRoutingModule\n  ]\n})\nexport class LoginModule { }\n"],"sourceRoot":"webpack:///"}